import { v4 as uuid } from "uuid"
import EphemeralRoomRepository from "../infra/repository/room/EphemeralRoomRepository"
import IRoomRepository from "../domain/room/IRoomRepository"
import RestRoomService from "../service/room/RestRoomService"
import RoomFactory from "../infra/factory/RoomFactory"
import Admin from "../domain/admin/admin"
import RoomClass from "../domain/room/Room"
import { PartiallyPartial } from "../types/utils"
import Topic from "../domain/room/Topic"
import { RoomModel, RoomState, Topic as TopicModel } from "sushi-chat-shared"
import EphemeralAdminRepository from "../infra/repository/admin/EphemeralAdminRepository"

describe("RestRoomService„ÅÆ„ÉÜ„Çπ„Éà", () => {
  let admin: Admin

  let roomId: string
  let title: string
  let emojiTitle: string
  let longTitle: string
  let inviteKey: string
  let description: string
  let longDescription: string
  let topics: PartiallyPartial<Topic, "id" | "state" | "pinnedChatItemId">[]
  let longTitleTopics: PartiallyPartial<
    Topic,
    "id" | "state" | "pinnedChatItemId"
  >[]
  let adminIds: Set<string>
  let startAt: Date
  let finishAt: Date

  let roomRepository: IRoomRepository
  let roomService: RestRoomService

  beforeEach(() => {
    const adminId = uuid()
    const adminName = "Admin"
    admin = new Admin(adminId, adminName, [])

    const adminRepository = new EphemeralAdminRepository()
    roomRepository = new EphemeralRoomRepository(adminRepository)
    const roomFactory = new RoomFactory()
    roomService = new RestRoomService(roomRepository, roomFactory)

    adminRepository.createIfNotExist(admin)

    roomId = uuid()
    // 100ÊñáÂ≠ó
    title =
      "Ë¶™Ë≠≤„Çä„ÅÆÁÑ°ÈâÑÁ†≤„ÅßÂ∞è‰æõ„ÅÆÊôÇ„Åã„ÇâÊêç„Å∞„Åã„Çä„Åó„Å¶„ÅÑ„Çã„ÄÇÂ∞èÂ≠¶Ê†°„Å´Â±Ö„ÇãÊôÇÂàÜÂ≠¶Ê†°„ÅÆ‰∫åÈöé„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶‰∏ÄÈÄ±Èñì„Åª„Å©ËÖ∞„ÇíÊäú„Åã„Åó„Åü‰∫ã„Åå„ÅÇ„Çã„ÄÇ„Å™„Åú„Åù„Çì„Å™ÁÑ°Èóá„Çí„Åó„Åü„Å®ËÅû„Åè‰∫∫„Åå„ÅÇ„Çã„Åã„ÇÇÁü•„Çå„Å¨„ÄÇÂà•ÊÆµÊ∑±„ÅÑÁêÜÁî±„Åß„ÇÇ„Å™„ÅÑ„ÄÇÊñ∞ÁØâ„ÅÆ‰∫åÈöé„Åãü§∑‚Äç‚ôÇÔ∏è"
    // ÊîπË°å„Åï„Çå„Çã„ÅÆ„Åß„Çè„Åñ„Å®ÂàÜ„Åë„Å¶„ÅÑ„Çã
    emojiTitle =
      "ü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏è" + "ü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏è" + "ü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏è"
    // 101ÊñáÂ≠ó
    longTitle =
      "Ë¶™Ë≠≤„Çä„ÅÆÁÑ°ÈâÑÁ†≤„ÅßÂ∞è‰æõ„ÅÆÊôÇ„Åã„ÇâÊêç„Å∞„Åã„Çä„Åó„Å¶„ÅÑ„Çã„ÄÇÂ∞èÂ≠¶Ê†°„Å´Â±Ö„ÇãÊôÇÂàÜÂ≠¶Ê†°„ÅÆ‰∫åÈöé„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶‰∏ÄÈÄ±Èñì„Åª„Å©ËÖ∞„ÇíÊäú„Åã„Åó„Åü‰∫ã„Åå„ÅÇ„Çã„ÄÇ„Å™„Åú„Åù„Çì„Å™ÁÑ°Èóá„Çí„Åó„Åü„Å®ËÅû„Åè‰∫∫„Åå„ÅÇ„Çã„Åã„ÇÇÁü•„Çå„Å¨„ÄÇÂà•ÊÆµÊ∑±„ÅÑÁêÜÁî±„Åß„ÇÇ„Å™„ÅÑ„ÄÇÊñ∞ÁØâ„ÅÆ‰∫åÈöé„Åã„ÇâÈ¶ñ"
    inviteKey = uuid()
    // 500ÊñáÂ≠ó
    description =
      "Ë¶™Ë≠≤„Çä„ÅÆÁÑ°ÈâÑÁ†≤„ÅßÂ∞è‰æõ„ÅÆÊôÇ„Åã„ÇâÊêç„Å∞„Åã„Çä„Åó„Å¶„ÅÑ„Çã„ÄÇÂ∞èÂ≠¶Ê†°„Å´Â±Ö„ÇãÊôÇÂàÜÂ≠¶Ê†°„ÅÆ‰∫åÈöé„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶‰∏ÄÈÄ±Èñì„Åª„Å©ËÖ∞„ÇíÊäú„Åã„Åó„Åü‰∫ã„Åå„ÅÇ„Çã„ÄÇ„Å™„Åú„Åù„Çì„Å™ÁÑ°Èóá„Çí„Åó„Åü„Å®ËÅû„Åè‰∫∫„Åå„ÅÇ„Çã„Åã„ÇÇÁü•„Çå„Å¨„ÄÇÂà•ÊÆµÊ∑±„ÅÑÁêÜÁî±„Åß„ÇÇ„Å™„ÅÑ„ÄÇÊñ∞ÁØâ„ÅÆ‰∫åÈöé„Åã„ÇâÈ¶ñ„ÇíÂá∫„Åó„Å¶„ÅÑ„Åü„Çâ„ÄÅÂêåÁ¥öÁîü„ÅÆ‰∏Ä‰∫∫„ÅåÂÜóË´á„Å´„ÄÅ„ÅÑ„Åè„ÇâÂ®ÅÂºµ„Å£„Å¶„ÇÇ„ÄÅ„Åù„Åì„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Çã‰∫ã„ÅØÂá∫Êù•„Åæ„ÅÑ„ÄÇÂº±Ëô´„ÇÑ„Éº„ÅÑ„ÄÇ„Å®ÂõÉ„Åó„Åü„Åã„Çâ„Åß„ÅÇ„Çã„ÄÇÂ∞è‰Ωø„Å´Ë≤†„Å∂„Åï„Å£„Å¶Â∏∞„Å£„Å¶Êù•„ÅüÊôÇ„ÄÅ„Åä„ÇÑ„Åò„ÅåÂ§ß„Åç„Å™Áúº„Çí„Åó„Å¶‰∫åÈöé„Åê„Çâ„ÅÑ„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶ËÖ∞„ÇíÊäú„Åã„ÅôÂ•¥„Åå„ÅÇ„Çã„Åã„Å®‰∫ë„Å£„Åü„Åã„Çâ„ÄÅ„Åì„ÅÆÊ¨°„ÅØÊäú„Åã„Åï„Åö„Å´È£õ„Çì„ÅßË¶ã„Åõ„Åæ„Åô„Å®Á≠î„Åà„Åü„ÄÇÔºàÈùíÁ©∫ÊñáÂ∫´„Çà„ÇäÔºâË¶™Ë≠≤„Çä„ÅÆÁÑ°ÈâÑÁ†≤„ÅßÂ∞è‰æõ„ÅÆÊôÇ„Åã„ÇâÊêç„Å∞„Åã„Çä„Åó„Å¶„ÅÑ„Çã„ÄÇÂ∞èÂ≠¶Ê†°„Å´Â±Ö„ÇãÊôÇÂàÜÂ≠¶Ê†°„ÅÆ‰∫åÈöé„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶‰∏ÄÈÄ±Èñì„Åª„Å©ËÖ∞„ÇíÊäú„Åã„Åó„Åü‰∫ã„Åå„ÅÇ„Çã„ÄÇ„Å™„Åú„Åù„Çì„Å™ÁÑ°Èóá„Çí„Åó„Åü„Å®ËÅû„Åè‰∫∫„Åå„ÅÇ„Çã„Åã„ÇÇÁü•„Çå„Å¨„ÄÇÂà•ÊÆµÊ∑±„ÅÑÁêÜÁî±„Åß„ÇÇ„Å™„ÅÑ„ÄÇÊñ∞ÁØâ„ÅÆ‰∫åÈöé„Åã„ÇâÈ¶ñ„ÇíÂá∫„Åó„Å¶„ÅÑ„Åü„Çâ„ÄÅÂêåÁ¥öÁîü„ÅÆ‰∏Ä‰∫∫„ÅåÂÜóË´á„Å´„ÄÅ„ÅÑ„Åè„ÇâÂ®ÅÂºµ„Å£„Å¶„ÇÇ„ÄÅ„Åù„Åì„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Çã‰∫ã„ÅØÂá∫Êù•„Åæ„ÅÑ„ÄÇÂº±Ëô´„ÇÑ„Éº„ÅÑ„ÄÇ„Å®ÂõÉ„Åó„Åü„Åã„Çâ„Åß„ÅÇ„Çã„ÄÇÂ∞è‰Ωø„Å´Ë≤†„Å∂„Åï„Å£„Å¶Â∏∞„Å£„Å¶Êù•„ÅüÊôÇ„ÄÅ„Åä„ÇÑ„Åò„ÅåÂ§ß„Åç„Å™Áúº„Çí„Åó„Å¶‰∫åÈöé„Åê„Çâ„ÅÑ„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶ËÖ∞„ÇíÊäú„Åã„ÅôÂ•¥„Åå„ÅÇ„Çã„Åã„Å®‰∫ë„Å£„Åü„Åã„Çâ„ÄÅ„Åì„ÅÆÊ¨°„ÅØÊäú„Åã„Åï„Åö„Å´È£õ„Çì„ÅßË¶ã„Åõ„Åæ„Åô„Å®Á≠î„Åà„Åü„ÄÇÔºàÈùíÁ©∫ÊñáÂ∫´„Çà„ÇäÔºâË¶™Ë≠≤„Çä„ÅÆÁÑ°ÈâÑÁ†≤„ÅßÂ∞èü§∑‚Äç‚ôÇÔ∏è"
    // 501ÊñáÂ≠ó
    longDescription =
      "Ë¶™Ë≠≤„Çä„ÅÆÁÑ°ÈâÑÁ†≤„ÅßÂ∞è‰æõ„ÅÆÊôÇ„Åã„ÇâÊêç„Å∞„Åã„Çä„Åó„Å¶„ÅÑ„Çã„ÄÇÂ∞èÂ≠¶Ê†°„Å´Â±Ö„ÇãÊôÇÂàÜÂ≠¶Ê†°„ÅÆ‰∫åÈöé„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶‰∏ÄÈÄ±Èñì„Åª„Å©ËÖ∞„ÇíÊäú„Åã„Åó„Åü‰∫ã„Åå„ÅÇ„Çã„ÄÇ„Å™„Åú„Åù„Çì„Å™ÁÑ°Èóá„Çí„Åó„Åü„Å®ËÅû„Åè‰∫∫„Åå„ÅÇ„Çã„Åã„ÇÇÁü•„Çå„Å¨„ÄÇÂà•ÊÆµÊ∑±„ÅÑÁêÜÁî±„Åß„ÇÇ„Å™„ÅÑ„ÄÇÊñ∞ÁØâ„ÅÆ‰∫åÈöé„Åã„ÇâÈ¶ñ„ÇíÂá∫„Åó„Å¶„ÅÑ„Åü„Çâ„ÄÅÂêåÁ¥öÁîü„ÅÆ‰∏Ä‰∫∫„ÅåÂÜóË´á„Å´„ÄÅ„ÅÑ„Åè„ÇâÂ®ÅÂºµ„Å£„Å¶„ÇÇ„ÄÅ„Åù„Åì„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Çã‰∫ã„ÅØÂá∫Êù•„Åæ„ÅÑ„ÄÇÂº±Ëô´„ÇÑ„Éº„ÅÑ„ÄÇ„Å®ÂõÉ„Åó„Åü„Åã„Çâ„Åß„ÅÇ„Çã„ÄÇÂ∞è‰Ωø„Å´Ë≤†„Å∂„Åï„Å£„Å¶Â∏∞„Å£„Å¶Êù•„ÅüÊôÇ„ÄÅ„Åä„ÇÑ„Åò„ÅåÂ§ß„Åç„Å™Áúº„Çí„Åó„Å¶‰∫åÈöé„Åê„Çâ„ÅÑ„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶ËÖ∞„ÇíÊäú„Åã„ÅôÂ•¥„Åå„ÅÇ„Çã„Åã„Å®‰∫ë„Å£„Åü„Åã„Çâ„ÄÅ„Åì„ÅÆÊ¨°„ÅØÊäú„Åã„Åï„Åö„Å´È£õ„Çì„ÅßË¶ã„Åõ„Åæ„Åô„Å®Á≠î„Åà„Åü„ÄÇÔºàÈùíÁ©∫ÊñáÂ∫´„Çà„ÇäÔºâË¶™Ë≠≤„Çä„ÅÆÁÑ°ÈâÑÁ†≤„ÅßÂ∞è‰æõ„ÅÆÊôÇ„Åã„ÇâÊêç„Å∞„Åã„Çä„Åó„Å¶„ÅÑ„Çã„ÄÇÂ∞èÂ≠¶Ê†°„Å´Â±Ö„ÇãÊôÇÂàÜÂ≠¶Ê†°„ÅÆ‰∫åÈöé„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶‰∏ÄÈÄ±Èñì„Åª„Å©ËÖ∞„ÇíÊäú„Åã„Åó„Åü‰∫ã„Åå„ÅÇ„Çã„ÄÇ„Å™„Åú„Åù„Çì„Å™ÁÑ°Èóá„Çí„Åó„Åü„Å®ËÅû„Åè‰∫∫„Åå„ÅÇ„Çã„Åã„ÇÇÁü•„Çå„Å¨„ÄÇÂà•ÊÆµÊ∑±„ÅÑÁêÜÁî±„Åß„ÇÇ„Å™„ÅÑ„ÄÇÊñ∞ÁØâ„ÅÆ‰∫åÈöé„Åã„ÇâÈ¶ñ„ÇíÂá∫„Åó„Å¶„ÅÑ„Åü„Çâ„ÄÅÂêåÁ¥öÁîü„ÅÆ‰∏Ä‰∫∫„ÅåÂÜóË´á„Å´„ÄÅ„ÅÑ„Åè„ÇâÂ®ÅÂºµ„Å£„Å¶„ÇÇ„ÄÅ„Åù„Åì„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Çã‰∫ã„ÅØÂá∫Êù•„Åæ„ÅÑ„ÄÇÂº±Ëô´„ÇÑ„Éº„ÅÑ„ÄÇ„Å®ÂõÉ„Åó„Åü„Åã„Çâ„Åß„ÅÇ„Çã„ÄÇÂ∞è‰Ωø„Å´Ë≤†„Å∂„Åï„Å£„Å¶Â∏∞„Å£„Å¶Êù•„ÅüÊôÇ„ÄÅ„Åä„ÇÑ„Åò„ÅåÂ§ß„Åç„Å™Áúº„Çí„Åó„Å¶‰∫åÈöé„Åê„Çâ„ÅÑ„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶ËÖ∞„ÇíÊäú„Åã„ÅôÂ•¥„Åå„ÅÇ„Çã„Åã„Å®‰∫ë„Å£„Åü„Åã„Çâ„ÄÅ„Åì„ÅÆÊ¨°„ÅØÊäú„Åã„Åï„Åö„Å´È£õ„Çì„ÅßË¶ã„Åõ„Åæ„Åô„Å®Á≠î„Åà„Åü„ÄÇÔºàÈùíÁ©∫ÊñáÂ∫´„Çà„ÇäÔºâË¶™Ë≠≤„Çä„ÅÆÁÑ°ÈâÑÁ†≤„ÅßÂ∞è‰æõ„ÅÆ"
    // 100ÊñáÂ≠ó
    topics = [1, 2].map((i) => ({
      title: `„ÉÜ„Çπ„Éà„Éà„Éî„ÉÉ„ÇØ${i}Ë¶™Ë≠≤„Çä„ÅÆÁÑ°ÈâÑÁ†≤„ÅßÂ∞è‰æõ„ÅÆÊôÇ„Åã„ÇâÊêç„Å∞„Åã„Çä„Åó„Å¶„ÅÑ„Çã„ÄÇÂ∞èÂ≠¶Ê†°„Å´Â±Ö„ÇãÊôÇÂàÜÂ≠¶Ê†°„ÅÆ‰∫åÈöé„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶‰∏ÄÈÄ±Èñì„Åª„Å©ËÖ∞„ÇíÊäú„Åã„Åó„Åü‰∫ã„Åå„ÅÇ„Çã„ÄÇ„Å™„Åú„Åù„Çì„Å™ÁÑ°Èóá„Çí„Åó„Åü„Å®ËÅû„Åè‰∫∫„Åå„ÅÇ„Çã„Åã„ÇÇÁü•„Çå„Å¨„ÄÇÂà•ÊÆµÊ∑±„ÅÑÁêÜÁî±„Åß„ÇÇ„Å™ü§∑‚Äç‚ôÇÔ∏è`,
    }))
    // 101ÊñáÂ≠ó
    longTitleTopics = [1, 2].map((i) => ({
      title: `„ÉÜ„Çπ„Éà„Éà„Éî„ÉÉ„ÇØ${i}Ë¶™Ë≠≤„Çä„ÅÆÁÑ°ÈâÑÁ†≤„ÅßÂ∞è‰æõ„ÅÆÊôÇ„Åã„ÇâÊêç„Å∞„Åã„Çä„Åó„Å¶„ÅÑ„Çã„ÄÇÂ∞èÂ≠¶Ê†°„Å´Â±Ö„ÇãÊôÇÂàÜÂ≠¶Ê†°„ÅÆ‰∫åÈöé„Åã„ÇâÈ£õ„Å≥Èôç„Çä„Å¶‰∏ÄÈÄ±Èñì„Åª„Å©ËÖ∞„ÇíÊäú„Åã„Åó„Åü‰∫ã„Åå„ÅÇ„Çã„ÄÇ„Å™„Åú„Åù„Çì„Å™ÁÑ°Èóá„Çí„Åó„Åü„Å®ËÅû„Åè‰∫∫„Åå„ÅÇ„Çã„Åã„ÇÇÁü•„Çå„Å¨„ÄÇÂà•ÊÆµÊ∑±„ÅÑÁêÜÁî±„Åß„ÇÇ„Å™„ÅÑ„ÄÇÊñ∞ÁØâ„ÅÆ‰∫åÈöé„Åã„ÇâÈ¶ñ`,
    }))
    adminIds = new Set([adminId])
    finishAt = new Date()
    // ÁèæÂÆü„Å´Âç≥„Åó„Å¶„ÄÅstartAt„ÇífinishAt„Çà„ÇäÂ∞ë„ÅóÂâç„Å´„Åó„Å¶„ÅÑ„Çã
    startAt = new Date(finishAt.getTime() - 1000 * 60 * 60)
  })

  describe("build„ÅÆ„ÉÜ„Çπ„Éà", () => {
    test("Ê≠£Â∏∏Á≥ª_„É´„Éº„É†Âêç„ÄÅ„Éà„Éî„ÉÉ„ÇØÂêç„Åå100ÊñáÂ≠ó„ÄÅË™¨Êòé„Åå500ÊñáÂ≠ó„ÅÆroom„Åå‰ΩúÊàê„Åï„Çå„Çã", async () => {
      const res = await roomService.build({
        adminId: admin.id,
        title,
        topics,
        description,
      })

      const roomId = res.id

      const room = await roomRepository.find(roomId)
      if (!room) {
        throw new Error(`Room(${roomId}) was not found.`)
      }

      expect(room.title).toBe(title)
      expect(room.description).toBe(description)
      expect(room.topics).toStrictEqual<Topic[]>(
        topics.map((topic, i) => ({
          ...topic,
          id: i + 1,
          state: "not-started",
          pinnedChatItemId: undefined,
        })),
      )
    })

    test("Ê≠£Â∏∏Á≥ª_ÁµµÊñáÂ≠ó„Åß100ÊñáÂ≠ó‰ª•ÂÜÖ„ÅÆ„É´„Éº„É†„Çø„Ç§„Éà„É´„ÅÆÊôÇroom„Åå‰ΩúÊàê„Åï„Çå„Çã", async () => {
      const res = await roomService.build({
        adminId: admin.id,
        title: emojiTitle,
        topics,
        description,
      })

      const roomId = res.id

      const room = await roomRepository.find(roomId)
      if (!room) {
        throw new Error(`Room(${roomId}) was not found.`)
      }

      expect(room.title).toBe(emojiTitle)
      expect(room.description).toBe(description)
      expect(room.topics).toStrictEqual<Topic[]>(
        topics.map((topic, i) => ({
          ...topic,
          id: i + 1,
          state: "not-started",
          pinnedChatItemId: undefined,
        })),
      )
    })

    test("Áï∞Â∏∏Á≥ª_100ÊñáÂ≠ó„ÇíË∂Ö„Åà„Çã„É´„Éº„É†„Çø„Ç§„Éà„É´„ÅÆÊôÇroom„Åå‰ΩúÊàê„Åï„Çå„Å™„ÅÑ", async () => {
      await expect(() =>
        roomService.build({
          adminId: admin.id,
          title: longTitle,
          topics,
          description,
        }),
      ).rejects.toThrowError()
    })

    test("Áï∞Â∏∏Á≥ª_500ÊñáÂ≠ó„ÇíË∂Ö„Åà„Çã„É´„Éº„É†Ë™¨Êòé„ÅÆÊôÇroom„Åå‰ΩúÊàê„Åï„Çå„Å™„ÅÑ", async () => {
      await expect(() =>
        roomService.build({
          adminId: admin.id,
          title,
          topics,
          description: longDescription,
        }),
      ).rejects.toThrowError()
    })

    test("Áï∞Â∏∏Á≥ª_100ÊñáÂ≠ó„ÇíË∂Ö„Åà„Çã„Éà„Éî„ÉÉ„ÇØ„Çø„Ç§„Éà„É´„ÅÆÊôÇroom„Åå‰ΩúÊàê„Åï„Çå„Å™„ÅÑ", async () => {
      await expect(() =>
        roomService.build({
          adminId: admin.id,
          title,
          topics: longTitleTopics,
          description,
        }),
      ).rejects.toThrowError()
    })
  })

  describe("start„ÅÆ„ÉÜ„Çπ„Éà", () => {
    test("Ê≠£Â∏∏Á≥ª_room„Ååstart„Åô„Çã", async () => {
      // start„Åï„Çå„Çãroom„Çí‰ΩúÊàê„Åó„Å¶„Åä„Åè
      const room = new RoomClass(
        roomId,
        title,
        inviteKey,
        description,
        topics,
        adminIds,
      )
      roomRepository.build(room)

      expect(room.state).toBe<RoomState>("not-started")
      expect(room.startAt).toBeNull()

      await roomService.start({ id: roomId, adminId: admin.id })

      const startedRoom = await roomRepository.find(roomId)
      if (!startedRoom) {
        throw new Error(`Room(${roomId}) was not found.`)
      }

      expect(startedRoom.state).toBe<RoomState>("ongoing")
      expect(startedRoom.startAt).not.toBeNull()
    })
  })

  describe("inviteAdmin„ÅÆ„ÉÜ„Çπ„Éà", () => {
    test("Ê≠£Â∏∏Á≥ª_Êñ∞„Åü„Å™ÁÆ°ÁêÜËÄÖ„ÅåÁôªÈå≤„Åï„Çå„Çã", async () => {
      // ÁÆ°ÁêÜËÄÖ„ÅåÁôªÈå≤„Åï„Çå„Çãroom„Çí‰ΩúÊàê„Åó„Å¶„Åä„Åè
      const room = new RoomClass(
        roomId,
        title,
        inviteKey,
        description,
        topics,
        adminIds,
      )
      roomRepository.build(room)

      expect(room.adminIds.size).toBe(1)

      const anotherAdminId = uuid()
      await roomService.inviteAdmin({
        id: roomId,
        adminId: anotherAdminId,
        adminInviteKey: inviteKey,
      })

      const invitedRoom = await roomRepository.find(roomId)
      if (!invitedRoom) {
        throw new Error(`Room(${roomId}) was not found.`)
      }

      expect(invitedRoom.adminIds.size).toBe(2)
      expect(invitedRoom.adminIds.has(anotherAdminId)).toBeTruthy()
    })
  })

  describe("archive„ÅÆ„ÉÜ„Çπ„Éà", () => {
    test("Ê≠£Â∏∏Á≥ª_room„Ååarchive„Åï„Çå„Çã", async () => {
      const room = new RoomClass(
        roomId,
        title,
        inviteKey,
        description,
        topics,
        adminIds,
        "finished",
        startAt,
        [],
        finishAt,
      )
      roomRepository.build(room)

      expect(room.state).toBe<RoomState>("finished")
      expect(room.archivedAt).toBeNull()

      await roomService.archive({ id: roomId, adminId: admin.id })

      expect(room.state).toBe<RoomState>("archived")
      expect(room.archivedAt).not.toBeNull()
    })
  })

  describe("checkAdminAndFind„ÅÆ„ÉÜ„Çπ„Éà", () => {
    test("Ê≠£Â∏∏Á≥ª_ÈùûÁÆ°ÁêÜËÄÖ„É¶„Éº„Ç∂„Éº„ÅåÁßòÂåø„Åß„Å™„ÅÑroomÊÉÖÂ†±„Çí„ÇíÂèñÂæó„Åß„Åç„Çã", async () => {
      const room = new RoomClass(
        roomId,
        title,
        inviteKey,
        description,
        topics,
        adminIds,
      )
      roomRepository.build(room)

      const res = await roomService.checkAdminAndfind({
        id: roomId,
      })

      expect(res).toStrictEqual<RoomModel>({
        id: roomId,
        title,
        description,
        topics: topics.map<TopicModel>((topic, i) => ({
          id: i + 1,
          order: i + 1,
          title: topic.title,
        })),
        state: "not-started",
        adminInviteKey: undefined,
        startDate: undefined,
      })
    })

    test("Ê≠£Â∏∏Á≥ª_ÁÆ°ÁêÜËÄÖ„É¶„Éº„Ç∂„Éº„ÅåÁßòÂåøÊÉÖÂ†±„ÇÇÂê´„ÇÅ„ÅüroomÊÉÖÂ†±„Çí„ÇíÂèñÂæó„Åß„Åç„Çã", async () => {
      const room = new RoomClass(
        roomId,
        title,
        inviteKey,
        description,
        topics,
        adminIds,
      )
      roomRepository.build(room)

      const res = await roomService.checkAdminAndfind({
        id: roomId,
        adminId: admin.id,
      })

      expect(res).toStrictEqual<RoomModel>({
        id: roomId,
        title,
        description,
        topics: topics.map<TopicModel>((topic, i) => ({
          id: i + 1,
          order: i + 1,
          title: topic.title,
        })),
        state: "not-started",
        adminInviteKey: inviteKey,
        startDate: undefined,
      })
    })
  })

  describe("find„ÅÆ„ÉÜ„Çπ„Éà", () => {
    test("Ê≠£Â∏∏Á≥ª_room„ÅÆÂ±•Ê≠¥„ÇíÂèñÂæó„Åß„Åç„Çã", async () => {
      const room = new RoomClass(
        roomId,
        title,
        inviteKey,
        description,
        topics,
        adminIds,
      )
      roomRepository.build(room)

      const res = await roomService.find(roomId)

      expect(res.chatItems).toStrictEqual([])
      expect(res.stamps).toStrictEqual([])
      expect(res.pinnedChatItemIds).toStrictEqual([1, 2].map(() => null))
    })
  })
})
